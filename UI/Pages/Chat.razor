@using System.Threading
@using StackExchange.Redis.Extensions.Utf8Json

@inherits LiveComponentBase<Chat.Model, Chat.LocalsModel>
@inject IChatService ChatService
@inject ClientState ClientState
@inject NavigationManager Navigator
@inject IJSRuntime JSRuntime




@{ var locals = Locals.Value;
    var state = State.LastValue;
    var lastPage = state.LastPage;
    var error = State.Error;
    var actualUserName = state.ChatUser?.Name; }



@* <div id="cli"></div> *@
@* <Composition></Composition> *@
@* <div class="glide"> *@
@* *@
@*     <div class="glide__track" data-glide-el="track"> *@
@* *@
@* *@
@*         <ul class="glide__slides"> *@
@*              *@
@*             <li class="glide__slide"> *@
@*            <Composition></Composition></li> *@
@*             <li class="glide__slide"><img src="https://source.unsplash.com/1600x900/?tree" alt="img"> *@
@*             </li> *@
@*             <li class="glide__slide"><img src="https://source.unsplash.com/1600x900/?forest" alt="img"></li> *@
@*               <li class="glide__slide"><div id="cli"></div></li> *@
@* *@
@*         </ul> *@
@*          *@
@*         <div class="glide__arrows" data-glide-el="controls"> *@
@*             <button class="glide__arrow glide__arrow--left" data-glide-dir="<">prev</button> *@
@*             <button class="glide__arrow glide__arrow--right" data-glide-dir=">">next</button> *@
@*         </div> *@
@*          <div class="glide__bullets" data-glide-el="controls[nav]"> *@
@*                 <button class="glide__bullet" data-glide-dir="=0"></button> *@
@*                 <button class="glide__bullet" data-glide-dir="=1"></button> *@
@*                 <button class="glide__bullet" data-glide-dir="=2"></button> *@
@*             </div> *@
@*          *@
@*            *@
@*     </div> *@
@*   <div data-glide-el="controls"> *@
@*                 <button data-glide-dir="<<">Start</button> *@
@*                 <button data-glide-dir=">>">End</button> *@
@*             </div> *@
@* *@
@* *@
@*     *@
@* *@

<MudCard>
    <MudCardMedia Image="https://source.unsplash.com/1600x900/?mars" />
    <MudCardContent>
        <h1 class="display-4">
            Front End Manager 
            <a href="https://digitalPlayground.ben-hassen.com" target="_blank"></a>

        </h1>
        
        @* <ActiveComponents>@this</ActiveComponents> *@
  
        <MudText Typo="Typo.body2">This component loads some useful utilities</MudText>
        <MudText Typo="Typo.body2">a place holder for now</MudText>
             <ServerTime></ServerTime>  
       
        <StatefulComponentState Component="@this" />
    </MudCardContent>
    <MudCardActions>
   
    </MudCardActions>
</MudCard>
<div class="example " data-component="example" data-active-class="example--active">
    <div class="example__frame">
        <div class="space space--medium">
  
            <div id="options-start-at" class="slider glide">
                <div class="slider__track glide__track" data-glide-el="track">
                    <ul  id="ActiveFrames"class="slider__slides glide__slides">
      
                        @* <li class="slider__frame glide__slide"><img src="https://source.unsplash.com/1600x900/?galaxy" alt="img"></li> *@
                        @* *@
                        @* <li class="slider__frame glide__slide"><img src="https://source.unsplash.com/1600x900/?tunisia" alt="img"></li> *@
                        @* <li class="slider__frame glide__slide"><img src="https://source.unsplash.com/1600x900/?earth" alt="img"></li> *@
                        @*  <li class="slider__frame glide__slidess">3ee  </li> *@
                        
                        
                        @* <MudCard><div  id="cliContainer" tabIndex="-1"></div></MudCard>  *@
                        <li class="slider__frame glide__slide"> <MudCard>
                                                                                             <MudCardMedia Image="https://source.unsplash.com/1600x900/?Aliens" />
                                                                                             <MudCardContent>
                                                                                                 <h1 class="display-4">
                                                                                                     Console
                                                                                                     <a href="https://digitalPlayground.ben-hassen.com" target="_blank"></a> 
                                                                                                 </h1>
                                                                                             
                                                                                 <div  id="cliContainer" tabIndex="-1"></div>
                                                                                             </MudCardContent>
                        </MudCard></li> 
                             <li class="slider__frame glide__slide"> <LightSwitch></LightSwitch> </li> 
                             <li class="slider__frame glide__slide">  <Home></Home> </li> 
                        <li class="slider__frame glide__slide">     <AccumulatorCard></AccumulatorCard></li> 
                   
                        <li class="slider__frame glide__slide">     <OnlineRoom></OnlineRoom></li> 
                         @* <li class="slider__frame glide__slide">     <VirtualPlaygroundV2></VirtualPlaygroundV2></li>  *@
                        @* <li class="slider__frame glide__slide">     <ServerScreen></ServerScreen></li>  *@
                        @* *@
       
      
                    </ul>
                </div>
                
    <div data-glide-el="controls">
                                            <button class="slider__arrow slider__arrow--prev glide__arrow glide__arrow--prev" data-glide-dir="<">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
                                                    <path d="M0 12l10.975 11 2.848-2.828-6.176-6.176H24v-3.992H7.646l6.176-6.176L10.975 1 0 12z"/>
                                                </svg>
                                            </button>
                        
                                            <button class="slider__arrow slider__arrow--next glide__arrow glide__arrow--next" data-glide-dir=">">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
                                                    <path d="M13.025 1l-2.847 2.828 6.176 6.176h-16.354v3.992h16.354l-6.176 6.176 2.847 2.828 10.975-11z"/>
                                                </svg>
                                            </button>
                                        </div>
                
            </div>
           
        </div>
         
    </div>

</div>

  <style>
      
       .glide__slidess {
              background-color: pink;
              border: 1px solid blue;
              margin: 0 5px;
              height: 100%;
              display: list-item;
            }
      
      .glide__slide {
        

   
        height: 100%;
        display: list-item;
      }
      #cliContainer{
       width: 100%;
               min-height: 300px;
               margin-bottom: 60px;
               height: 50%;
          
               box-shadow: rgba(0, 0, 0, 0.42) 5px 5px 25px;
               font-size: 14px;
               font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;
               border-radius: 4px;
               padding: 75px 25px 35px;
               position: relative;
                   overflow-y: scroll;  !important;
                        display: block;                             
               -webkit-box-sizing: border-box;
                       box-sizing: border-box;
           
               -ms-overflow-style: none;  // IE 10+
              
      
      
      } 
      .glide__arrow--next {
        top: 50%;
        right: 0%;
        position: fixed
      }
        .glide__arrow--prev {
         top: 50%;
                left: auto;
                position: fixed
            }
      

    </style>



@code { 
    
    

    private static IJSObjectReference RuntimeContainer;
    private static IJSObjectReference mainJS;

 
    
        const string ImportPath = "../js/stats.module.js";

  
   
    [JSInvokable]
    public async void initializedfromJs()
    {
        Console.WriteLine(("initialized in livestate"));
    }


    // public async ValueTask DisposeAsync()
    // {
    //
    //     await mainJS.DisposeAsync();
    //     await RuntimeContainer.DisposeAsync();
    //     Console.WriteLine(("disposed"));
    //
    // }

    public class UpdateRequest
    {
        public string ID { get; set; }
        public int RequestType { get; set; }
        public string Data { get; set; }

    }


    //
    // [Parameter]
    // public IJSObjectReference LocalPlaygroundInstance { get; set; } = null!;


    public class LocalsModel
    {
        private string _name = "";
        
        public string Name
        {
            get => _name;
            set
            {
                _name = value;
                IsNameModified = true;
            }
        }

        public bool IsNameModified { get; set; }
        public string Message { get; set; } = "";
        public Exception? Error { get; set; }
    }

    public class Model
    {
        public long UserCount { get; set; }
        public long ActiveUserCount { get; set; }
        public ChatUser? ChatUser { get; set; }
        public ChatPage LastPage { get; set; } = new();
        
    }

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var userCount = await ChatService.GetUserCountAsync(cancellationToken);
        var activeUserCount = await ChatService.GetActiveUserCountAsync(cancellationToken);
        var chatUser = await ClientState.ChatUser.UseAsync(cancellationToken);
        var lastPage = await ChatService.GetChatTailAsync(10, cancellationToken);
        if (!Locals.Value.IsNameModified)
            ResetName(chatUser?.Name ?? "");
        return new Model()
        {
            UserCount = userCount,
            ActiveUserCount = activeUserCount,
            ChatUser = chatUser,
            LastPage = lastPage,
        };
    }

    protected override async Task OnInitializedAsync()
    {


        var chatUser = await ChatService.GetCurrentUserAsync(ClientState.Session);
        if (chatUser == null)
            await SetNameAsync();
        
  
          
    }
    
    protected override async void OnAfterRender(bool firstRender)
    {
        //mainDotnet.Create(this); 
        if (!firstRender) return;
        RuntimeContainer = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "../js/VirtualPlayground.js");
        mainJS = await RuntimeContainer.InvokeAsync<IJSObjectReference>("init", DotNetObjectReference.Create(this));
       
    }
     
  
    [JSInvokable]
    public async Task hello_LiveStateHandler(object ob)
    {
        // Console.WriteLine(ob);
        UpdateRequest a = Utf8Json.JsonSerializer.Deserialize<UpdateRequest>(ob.ToString());
        //Console.WriteLine("deserialized" + a.ID + " " + a.RequestType);
        await mainJS.InvokeVoidAsync("_registerPlayer", "idMaster");

        //  Console.WriteLine(a.Data.ToString() + " " + a.RequestType.ToString());
        ResetError();
        try
        {


           // if (ClientState.ChatUser.Value == null)
           //     throw new ApplicationException("Please set your name first.");
           // await ChatService.PostMessageAsync(new("Command: " + ob.ToString(), ClientState.Session));
            Locals.Value.Message = "";
            TouchLocals();

        }
        catch (Exception e)
        {
            SetError(e);
        }
    }

    private async Task SetNameAsync()
    {
        ResetError();
        var locals = Locals.Value;
        try
        {  // await LocalPlaygroundInstance.InvokeVoidAsync("helloFromLiveComponent", DotNetObjectReference.Create(this));
            await mainJS.InvokeVoidAsync("_registerPlayer", "idMaster");
            await ChatService.SetUserNameAsync(new(locals.Name ?? "", ClientState.Session));
        }
        catch (Exception e)
        {
            SetError(e);
        }
    }

    private async Task SendMessageAsync()
    {
        ResetError();
        try
        {
            if (ClientState.ChatUser.Value == null)
                throw new ApplicationException("Please set your name first.");
            await ChatService.PostMessageAsync(new(Locals.Value.Message, ClientState.Session));
            Locals.Value.Message = "";
            TouchLocals();
         
        }
        catch (Exception e)
        {
            SetError(e);
        }
    }

    private void SignIn() => JSRuntime.InvokeVoidAsync("FusionAuth.signIn");
    private void SignOut() => JSRuntime.InvokeVoidAsync("FusionAuth.signOut");

    // Convenience shortcuts

    private void ResetError()
        => SetError(null);

    private void ResetName(string name)
    {
        Locals.Value.Name = name;
        Locals.Value.IsNameModified = false;
        TouchLocals();
    }

    private void SetError(Exception? error)
    {
        Locals.Value.Error = error;
        TouchLocals();
    }

    private void TouchLocals()
        => Locals.Set(Locals.AsResult()); }
