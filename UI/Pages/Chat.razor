@using System.Threading
@using StackExchange.Redis.Extensions.Utf8Json

@inherits LiveComponentBase<Chat.Model, Chat.LocalsModel>
@inject IChatService ChatService
@inject ClientState ClientState
@inject NavigationManager Navigator
@inject IJSRuntime JSRuntime




@{ var locals = Locals.Value;
    var state = State.LastValue;
    var lastPage = state.LastPage;
    var error = State.Error;
    var actualUserName = state.ChatUser?.Name; }



@* <div id="cli"></div> *@
@* <Composition></Composition> *@
<div class="glide">

    <div class="glide__track" data-glide-el="track">


        <ul class="glide__slides">
            <li class="glide__slide"><div id="cli"></div></li>
            <li class="glide__slide"><img src="https://source.unsplash.com/1600x900/?tree" alt="img">
            </li>
            <li class="glide__slide"><img src="https://source.unsplash.com/1600x900/?forest" alt="img"></li>
            <li class="glide__slide"><Composition></Composition></li>
        </ul>
        
        <div class="glide__arrows" data-glide-el="controls">
            <button class="glide__arrow glide__arrow--left" data-glide-dir="<">prev</button>
            <button class="glide__arrow glide__arrow--right" data-glide-dir=">">next</button>
        </div>
         <div class="glide__bullets" data-glide-el="controls[nav]">
                <button class="glide__bullet" data-glide-dir="=0"></button>
                <button class="glide__bullet" data-glide-dir="=1"></button>
                <button class="glide__bullet" data-glide-dir="=2"></button>
            </div>
        
          
    </div>
  <div data-glide-el="controls">
                <button data-glide-dir="<<">Start</button>
                <button data-glide-dir=">>">End</button>
            </div>


   

</div>


@code { 
    
    

    private static IJSObjectReference RuntimeContainer;
    private static IJSObjectReference mainJS;

 
    
        const string ImportPath = "../js/stats.module.js";

  
   
    [JSInvokable]
    public async void initializedfromJs()
    {
        Console.WriteLine(("initialized in livestate"));
    }


    // public async ValueTask DisposeAsync()
    // {
    //
    //     await mainJS.DisposeAsync();
    //     await RuntimeContainer.DisposeAsync();
    //     Console.WriteLine(("disposed"));
    //
    // }

    public class UpdateRequest
    {
        public string ID { get; set; }
        public int RequestType { get; set; }
        public string Data { get; set; }

    }


    //
    // [Parameter]
    // public IJSObjectReference LocalPlaygroundInstance { get; set; } = null!;


    public class LocalsModel
    {
        private string _name = "";
        
        public string Name
        {
            get => _name;
            set
            {
                _name = value;
                IsNameModified = true;
            }
        }

        public bool IsNameModified { get; set; }
        public string Message { get; set; } = "";
        public Exception? Error { get; set; }
    }

    public class Model
    {
        public long UserCount { get; set; }
        public long ActiveUserCount { get; set; }
        public ChatUser? ChatUser { get; set; }
        public ChatPage LastPage { get; set; } = new();
        
    }

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var userCount = await ChatService.GetUserCountAsync(cancellationToken);
        var activeUserCount = await ChatService.GetActiveUserCountAsync(cancellationToken);
        var chatUser = await ClientState.ChatUser.UseAsync(cancellationToken);
        var lastPage = await ChatService.GetChatTailAsync(10, cancellationToken);
        if (!Locals.Value.IsNameModified)
            ResetName(chatUser?.Name ?? "");
        return new Model()
        {
            UserCount = userCount,
            ActiveUserCount = activeUserCount,
            ChatUser = chatUser,
            LastPage = lastPage,
        };
    }

    protected override async Task OnInitializedAsync()
    {


        var chatUser = await ChatService.GetCurrentUserAsync(ClientState.Session);
        if (chatUser == null)
            await SetNameAsync();
        
  
          
    }
    
    protected override async void OnAfterRender(bool firstRender)
    {
        //mainDotnet.Create(this); 
        if (!firstRender) return;
        RuntimeContainer = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "../js/VirtualPlayground.js");
        mainJS = await RuntimeContainer.InvokeAsync<IJSObjectReference>("init", DotNetObjectReference.Create(this));
       
    }
     
  
    [JSInvokable]
    public async Task hello_LiveStateHandler(object ob)
    {
        // Console.WriteLine(ob);
        UpdateRequest a = Utf8Json.JsonSerializer.Deserialize<UpdateRequest>(ob.ToString());
        //Console.WriteLine("deserialized" + a.ID + " " + a.RequestType);


        //  Console.WriteLine(a.Data.ToString() + " " + a.RequestType.ToString());
        ResetError();
        try
        {


           // if (ClientState.ChatUser.Value == null)
           //     throw new ApplicationException("Please set your name first.");
           // await ChatService.PostMessageAsync(new("Command: " + ob.ToString(), ClientState.Session));
            Locals.Value.Message = "";
            TouchLocals();

        }
        catch (Exception e)
        {
            SetError(e);
        }
    }

    private async Task SetNameAsync()
    {
        ResetError();
        var locals = Locals.Value;
        try
        {  // await LocalPlaygroundInstance.InvokeVoidAsync("helloFromLiveComponent", DotNetObjectReference.Create(this));
            await mainJS.InvokeVoidAsync("_registerPlayer", "idMaster");
            await ChatService.SetUserNameAsync(new(locals.Name ?? "", ClientState.Session));
        }
        catch (Exception e)
        {
            SetError(e);
        }
    }

    private async Task SendMessageAsync()
    {
        ResetError();
        try
        {
            if (ClientState.ChatUser.Value == null)
                throw new ApplicationException("Please set your name first.");
            await ChatService.PostMessageAsync(new(Locals.Value.Message, ClientState.Session));
            Locals.Value.Message = "";
            TouchLocals();
         
        }
        catch (Exception e)
        {
            SetError(e);
        }
    }

    private void SignIn() => JSRuntime.InvokeVoidAsync("FusionAuth.signIn");
    private void SignOut() => JSRuntime.InvokeVoidAsync("FusionAuth.signOut");

    // Convenience shortcuts

    private void ResetError()
        => SetError(null);

    private void ResetName(string name)
    {
        Locals.Value.Name = name;
        Locals.Value.IsNameModified = false;
        TouchLocals();
    }

    private void SetError(Exception? error)
    {
        Locals.Value.Error = error;
        TouchLocals();
    }

    private void TouchLocals()
        => Locals.Set(Locals.AsResult()); }
